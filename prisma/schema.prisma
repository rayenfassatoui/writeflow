// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // For email/password auth
  image         String?   // For profile picture
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  usageCredits  Int       @default(0)
  apiKey        String?   @unique // For API access
  activities    UserActivity[]
}

model Project {
  id          String    @id @default(cuid())
  title       String
  content     String?   @db.Text
  description String?   @db.Text
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Status    @default(DRAFT)
  type        ContentType
  versions    Version[]
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  metrics     ContentMetrics?
}

model Version {
  id        String   @id @default(cuid())
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  projects  Project[]
  createdAt DateTime  @default(now())
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ActivityType
  metadata  Json?
  createdAt DateTime @default(now())
}

model ContentMetrics {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  views     Int      @default(0)
  shares    Int      @default(0)
  reactions Int      @default(0)
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  BLOG_POST
  SOCIAL_MEDIA
  AD_COPY
  EMAIL
  WEBSITE_COPY
  CUSTOM
}

enum ActivityType {
  PROJECT_CREATE
  PROJECT_EDIT
  CONTENT_GENERATE
  CONTENT_OPTIMIZE
  VERSION_CREATE
  LOGIN
}
